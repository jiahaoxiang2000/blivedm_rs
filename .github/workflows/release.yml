name: Publish to crates.io

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: release # GitHub environment for Trusted Publishing
    permissions:
      id-token: write # Required for OIDC token exchange

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag name
        id: tag_name
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Verify version matches tag
        run: |
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          TAG_VERSION="${{ steps.tag_name.outputs.TAG_NAME }}"
          TAG_VERSION="${TAG_VERSION#v}"
          if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: Cargo.toml version ($CARGO_VERSION) does not match tag version ($TAG_VERSION)"
            exit 1
          fi

      - name: Authenticate with crates.io
        uses: rust-lang/crates-io-auth-action@v1
        id: auth

      - name: Publish blivedm to crates.io
        run: cargo publish --locked
        env:
          CARGO_REGISTRY_TOKEN: ${{ steps.auth.outputs.token }}

      - name: Get previous tag
        id: previoustag
        run: |
          echo "PREVIOUS_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo '')" >> $GITHUB_ENV
          echo "CURRENT_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Generate release notes
        id: generate_notes
        run: |
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "## 📦 Published to crates.io" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "Install with:" >> $GITHUB_ENV
            echo "\`\`\`bash" >> $GITHUB_ENV
            echo "cargo install --locked blivedm" >> $GITHUB_ENV
            echo "\`\`\`" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "## 📝 Changes since $PREVIOUS_TAG" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            git log --pretty=format:"* %s (%an) [%h](https://github.com/${{ github.repository }}/commit/%H)" $PREVIOUS_TAG..$CURRENT_TAG >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "## 📚 Documentation" >> $GITHUB_ENV
            echo "- [crates.io](https://crates.io/crates/blivedm)" >> $GITHUB_ENV
            echo "- [GitHub Repository](https://github.com/${{ github.repository }})" >> $GITHUB_ENV
            echo "- [README](https://github.com/${{ github.repository }}/blob/master/README.md)" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "## 📦 Published to crates.io" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "Install with:" >> $GITHUB_ENV
            echo "\`\`\`bash" >> $GITHUB_ENV
            echo "cargo install --locked blivedm" >> $GITHUB_ENV
            echo "\`\`\`" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "## ✨ Features" >> $GITHUB_ENV
            echo "- 🔍 Smart Cookie Detection - Auto-detect from browsers" >> $GITHUB_ENV
            echo "- 💬 Real-time Danmaku Monitoring" >> $GITHUB_ENV
            echo "- 🔊 Multi-platform TTS Support" >> $GITHUB_ENV
            echo "- 🎛️ Plugin Architecture" >> $GITHUB_ENV
            echo "- 🖥️ Cross-platform Support" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "## 📚 Documentation" >> $GITHUB_ENV
            echo "- [crates.io](https://crates.io/crates/blivedm)" >> $GITHUB_ENV
            echo "- [GitHub Repository](https://github.com/${{ github.repository }})" >> $GITHUB_ENV
            echo "- [README](https://github.com/${{ github.repository }}/blob/master/README.md)" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
          name: Release ${{ steps.tag_name.outputs.TAG_NAME }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
